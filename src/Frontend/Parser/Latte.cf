------------------------------------------------------------
-- Plik zawiera gramatykę języka Latte rozszerzoną o:
--  - definicje klas,
--  - typy tablicowe
-- programs ------------------------------------------------

entrypoints Program ;

Program.   Program ::= [TopDef] ;

FnTopDef.  TopDef ::= FnDef ;
ClsTopDef. TopDef ::= ClsDef ;
separator nonempty TopDef "" ;

MetDef.    MemberDef ::= FnDef ;
FieldDef.  MemberDef ::= VarDef ;
separator MemberDef "" ;

Arg. 	     Arg ::= Type Ident;
separator  Arg "," ;

FnDef.     FnDef  ::= Type Ident "(" [Arg] ")" Block ;
ClsDef.    ClsDef ::= "class" Ident                 "{" [MemberDef] "}" ;
ClsDefEx.  ClsDef ::= "class" Ident "extends" Ident "{" [MemberDef] "}" ;
VarDef.    VarDef ::= Type [Item] ";" ;

-- statements ----------------------------------------------

Block.     Block ::= "{" [Stmt] "}" ;

separator  Stmt "" ;
Empty.     Stmt ::= ";" ;
BStmt.     Stmt ::= Block ;
Decl.      Stmt ::= VarDef ;

	NoInit.    Item ::= Ident ; 
	Init.      Item ::= Ident "=" Expr ;
	separator nonempty Item "," ;

Ass.       Stmt ::= LVal "=" Expr ";" ;
Incr.      Stmt ::= LVal "++"  ";" ;
Decr.      Stmt ::= LVal "--"  ";" ;
Ret.       Stmt ::= "return" Expr ";" ;
VRet.      Stmt ::= "return" ";" ;
Cond.      Stmt ::= "if" "(" Expr ")" Stmt ;
CondElse.  Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt ;
While.     Stmt ::= "while" "(" Expr ")" Stmt ;
For.       Stmt ::= "for" "(" Type Ident ":" Expr ")" Stmt ;
SExp.      Stmt ::= Expr  ";" ;

-- Types ---------------------------------------------------

-- Int.          Type ::= "int" ;
-- Str.          Type ::= "string" ;
-- Bool.         Type ::= "boolean" ;
-- Void.         Type ::= "void" ;
SimpleT.       Type ::= Ident ;
ArrayT.        Type ::= Type "[]" ;
internal FunT. Type ::= Type "(" [Type] ")" ;
separator Type "," ;

-- Expressions ---------------------------------------------

ELitInt.   Expr6 ::= Integer ;
ELitTrue.  Expr6 ::= "true" ;
ELitFalse. Expr6 ::= "false" ;
ELitNull.  Expr6 ::= "(" Type ")null" ;
EString.   Expr6 ::= String ;
EApp.      Expr6 ::= Ident "(" [Expr] ")" ;
ELVal.     Expr6 ::= LVal ; -- Instead of those rules:
-- EVar.      Expr6 ::= Ident ;                         -- LVal
-- ArrAccess. Expr6 ::= Expr6 "[" Expr "]" ;            -- LVal
-- ClsAccess. Expr6 ::= Expr6 "." Ident ;               -- LVal
ClsApply.  Expr6 ::= Expr6 "." Ident "(" [Expr] ")" ;

ArrAlloc.  Expr5 ::= "new" Type "[" Expr "]" ;
ClsAlloc.  Expr5 ::= "new" Type ;
Neg.       Expr5 ::= "-" Expr6 ;
Not.       Expr5 ::= "!" Expr6 ;

EMul.      Expr4 ::= Expr4 Op2 Expr5 ;
EAdd.      Expr3 ::= Expr3 Op1 Expr4 ;
ERel.      Expr2 ::= Expr2 Op3 Expr3 ;
EAnd.      Expr1 ::= Expr2 Op4 Expr1 ;
EOr.       Expr  ::= Expr1 Op5 Expr  ;

internal EBinOp. Expr ::= Expr Op Expr ;
coercions  Expr 7 ;
separator  Expr "," ;

-- LValues -------------------------------------------------

LVar.      LVal ::= Ident ;
LArrAcc.   LVal ::= Expr6 "[" Expr "]" ;
LClsAcc.   LVal ::= Expr6 "." Ident ;

-- operators -----------------------------------------------

Plus.      Op1 ::= "+"  ;
Minus.     Op1 ::= "-"  ;

Times.     Op2 ::= "*"  ;
Div.       Op2 ::= "/"  ;
Mod.       Op2 ::= "%"  ;

LTH.       Op3 ::= "<"  ;
LE.        Op3 ::= "<=" ;
GTH.       Op3 ::= ">"  ;
GE.        Op3 ::= ">=" ;
EQU.       Op3 ::= "==" ;
NE.        Op3 ::= "!=" ;

AND.       Op4 ::= "&&" ;

OR.        Op5 ::= "||" ;

-- Overloaded versions of "==" operator
internal EQU_Int. Op ::= "==" ;
internal EQU_Str. Op ::= "==" ;
internal EQU_Arr. Op ::= "==" ;
internal EQU_Ref. Op ::= "==" ;
internal EQU_Bol. Op ::= "==" ;

-- Overloaded versions of "+" operator
internal Plus_Int. Op ::= "+" ;
internal Plus_Str. Op ::= "+" ;

_.         Op ::= Op1 ;
_.         Op ::= Op2 ;
_.         Op ::= Op3 ;
_.         Op ::= Op4 ;
_.         Op ::= Op5 ;

-- comments ------------------------------------------------

comment    "#" ;
comment    "//" ;
comment    "/*" "*/" ;