{-# OPTIONS_GHC -w #-}
{-# LANGUAGE GADTs #-}
module Frontend.Parser.SkelLatte where

-- Haskell module generated by the BNF converter

import Frontend.Parser.AbsLatte
import Frontend.Parser.ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transTree :: Tree c -> Result
transTree t = case t of
  Program topdefs -> failure t
  FnTopDef fndef -> failure t
  ClsTopDef clsdef -> failure t
  MetDef fndef -> failure t
  FieldDef type' fditems -> failure t
  FdNoInit ident -> failure t
  Arg type' ident -> failure t
  FnDef type' ident args block -> failure t
  ClsDef ident memberdefs -> failure t
  ClsDefEx ident0 ident1 memberdefs2 -> failure t
  Block stmts -> failure t
  Empty  -> failure t
  BStmt block -> failure t
  Decl type' items -> failure t
  Ass lval expr -> failure t
  Incr lval -> failure t
  Decr lval -> failure t
  Ret expr -> failure t
  VRet  -> failure t
  Cond expr stmt -> failure t
  CondElse expr stmt0 stmt1 -> failure t
  While expr stmt -> failure t
  For type' ident expr stmt -> failure t
  SExp expr -> failure t
  NoInit ident -> failure t
  Init ident expr -> failure t
  IntT  -> failure t
  StringT  -> failure t
  BooleanT  -> failure t
  VoidT  -> failure t
  ClassT ident -> failure t
  ArrayT type' -> failure t
  FunT type' types -> failure t
  ELitInt integer -> failure t
  ELitTrue  -> failure t
  ELitFalse  -> failure t
  ELitNull type' -> failure t
  EString string -> failure t
  EApp ident exprs -> failure t
  ELVal lval -> failure t
  ClsApply expr ident exprs -> failure t
  ArrAlloc type' expr -> failure t
  ClsAlloc type' -> failure t
  Neg expr -> failure t
  Not expr -> failure t
  EMul expr0 op1 expr2 -> failure t
  EAdd expr0 op1 expr2 -> failure t
  ERel expr0 op1 expr2 -> failure t
  EAnd expr0 op1 expr2 -> failure t
  EOr expr0 op1 expr2 -> failure t
  EBinOp expr0 op1 expr2 -> failure t
  LVar ident -> failure t
  LArrAcc expr0 expr1 -> failure t
  LClsAcc expr ident -> failure t
  Plus  -> failure t
  Minus  -> failure t
  Times  -> failure t
  Div  -> failure t
  Mod  -> failure t
  LTH  -> failure t
  LE  -> failure t
  GTH  -> failure t
  GE  -> failure t
  EQU  -> failure t
  NE  -> failure t
  AND  -> failure t
  OR  -> failure t
  EQU_Int  -> failure t
  EQU_Str  -> failure t
  EQU_Arr  -> failure t
  EQU_Ref  -> failure t
  EQU_Bool  -> failure t
  NE_Int  -> failure t
  NE_Str  -> failure t
  NE_Arr  -> failure t
  NE_Ref  -> failure t
  NE_Bool  -> failure t
  Plus_Int  -> failure t
  Plus_Str  -> failure t
  Ident str -> failure t

transProgram :: Program -> Result
transProgram t = case t of
  Program topdefs -> failure t

transTopDef :: TopDef -> Result
transTopDef t = case t of
  FnTopDef fndef -> failure t
  ClsTopDef clsdef -> failure t

transMemberDef :: MemberDef -> Result
transMemberDef t = case t of
  MetDef fndef -> failure t
  FieldDef type' fditems -> failure t

transFdItem :: FdItem -> Result
transFdItem t = case t of
  FdNoInit ident -> failure t

transArg :: Arg -> Result
transArg t = case t of
  Arg type' ident -> failure t

transFnDef :: FnDef -> Result
transFnDef t = case t of
  FnDef type' ident args block -> failure t

transClsDef :: ClsDef -> Result
transClsDef t = case t of
  ClsDef ident memberdefs -> failure t
  ClsDefEx ident0 ident1 memberdefs2 -> failure t

transBlock :: Block -> Result
transBlock t = case t of
  Block stmts -> failure t

transStmt :: Stmt -> Result
transStmt t = case t of
  Empty  -> failure t
  BStmt block -> failure t
  Decl type' items -> failure t
  Ass lval expr -> failure t
  Incr lval -> failure t
  Decr lval -> failure t
  Ret expr -> failure t
  VRet  -> failure t
  Cond expr stmt -> failure t
  CondElse expr stmt0 stmt1 -> failure t
  While expr stmt -> failure t
  For type' ident expr stmt -> failure t
  SExp expr -> failure t

transItem :: Item -> Result
transItem t = case t of
  NoInit ident -> failure t
  Init ident expr -> failure t

transType :: Type -> Result
transType t = case t of
  IntT  -> failure t
  StringT  -> failure t
  BooleanT  -> failure t
  VoidT  -> failure t
  ClassT ident -> failure t
  ArrayT type' -> failure t
  FunT type' types -> failure t

transExpr :: Expr -> Result
transExpr t = case t of
  ELitInt integer -> failure t
  ELitTrue  -> failure t
  ELitFalse  -> failure t
  ELitNull type' -> failure t
  EString string -> failure t
  EApp ident exprs -> failure t
  ELVal lval -> failure t
  ClsApply expr ident exprs -> failure t
  ArrAlloc type' expr -> failure t
  ClsAlloc type' -> failure t
  Neg expr -> failure t
  Not expr -> failure t
  EMul expr0 op1 expr2 -> failure t
  EAdd expr0 op1 expr2 -> failure t
  ERel expr0 op1 expr2 -> failure t
  EAnd expr0 op1 expr2 -> failure t
  EOr expr0 op1 expr2 -> failure t
  EBinOp expr0 op1 expr2 -> failure t

transLVal :: LVal -> Result
transLVal t = case t of
  LVar ident -> failure t
  LArrAcc expr0 expr1 -> failure t
  LClsAcc expr ident -> failure t

transOp :: Op -> Result
transOp t = case t of
  Plus  -> failure t
  Minus  -> failure t
  Times  -> failure t
  Div  -> failure t
  Mod  -> failure t
  LTH  -> failure t
  LE  -> failure t
  GTH  -> failure t
  GE  -> failure t
  EQU  -> failure t
  NE  -> failure t
  AND  -> failure t
  OR  -> failure t
  EQU_Int  -> failure t
  EQU_Str  -> failure t
  EQU_Arr  -> failure t
  EQU_Ref  -> failure t
  EQU_Bool  -> failure t
  NE_Int  -> failure t
  NE_Str  -> failure t
  NE_Arr  -> failure t
  NE_Ref  -> failure t
  NE_Bool  -> failure t
  Plus_Int  -> failure t
  Plus_Str  -> failure t

transIdent :: Ident -> Result
transIdent t = case t of
  Ident str -> failure t

