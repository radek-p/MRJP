-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module Frontend.Parser.ParLatte where
import Frontend.Parser.AbsLatte
import Frontend.Parser.LexLatte
import Frontend.Parser.ErrM

}

%name pProgram Program
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '!' { PT _ (TS _ 1) }
  '!=' { PT _ (TS _ 2) }
  '%' { PT _ (TS _ 3) }
  '&&' { PT _ (TS _ 4) }
  '(' { PT _ (TS _ 5) }
  ')' { PT _ (TS _ 6) }
  ')null' { PT _ (TS _ 7) }
  '*' { PT _ (TS _ 8) }
  '+' { PT _ (TS _ 9) }
  '++' { PT _ (TS _ 10) }
  ',' { PT _ (TS _ 11) }
  '-' { PT _ (TS _ 12) }
  '--' { PT _ (TS _ 13) }
  '.' { PT _ (TS _ 14) }
  '/' { PT _ (TS _ 15) }
  ':' { PT _ (TS _ 16) }
  ';' { PT _ (TS _ 17) }
  '<' { PT _ (TS _ 18) }
  '<=' { PT _ (TS _ 19) }
  '=' { PT _ (TS _ 20) }
  '==' { PT _ (TS _ 21) }
  '>' { PT _ (TS _ 22) }
  '>=' { PT _ (TS _ 23) }
  '[' { PT _ (TS _ 24) }
  '[]' { PT _ (TS _ 25) }
  ']' { PT _ (TS _ 26) }
  'boolean' { PT _ (TS _ 27) }
  'class' { PT _ (TS _ 28) }
  'else' { PT _ (TS _ 29) }
  'extends' { PT _ (TS _ 30) }
  'false' { PT _ (TS _ 31) }
  'for' { PT _ (TS _ 32) }
  'if' { PT _ (TS _ 33) }
  'int' { PT _ (TS _ 34) }
  'new' { PT _ (TS _ 35) }
  'return' { PT _ (TS _ 36) }
  'string' { PT _ (TS _ 37) }
  'true' { PT _ (TS _ 38) }
  'void' { PT _ (TS _ 39) }
  'while' { PT _ (TS _ 40) }
  '{' { PT _ (TS _ 41) }
  '||' { PT _ (TS _ 42) }
  '}' { PT _ (TS _ 43) }

L_ident  { PT _ (TV $$) }
L_integ  { PT _ (TI $$) }
L_quoted { PT _ (TL $$) }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
String  :: { String }  : L_quoted {  $1 }

Program :: { Program }
Program : ListTopDef { Frontend.Parser.AbsLatte.Program $1 }
TopDef :: { TopDef }
TopDef : FnDef { Frontend.Parser.AbsLatte.FnTopDef $1 }
       | ClsDef { Frontend.Parser.AbsLatte.ClsTopDef $1 }
ListTopDef :: { [TopDef] }
ListTopDef : TopDef { (:[]) $1 } | TopDef ListTopDef { (:) $1 $2 }
MemberDef :: { MemberDef }
MemberDef : FnDef { Frontend.Parser.AbsLatte.MetDef $1 }
          | Type ListFdItem ';' { Frontend.Parser.AbsLatte.FieldDef $1 $2 }
FdItem :: { FdItem }
FdItem : Ident { Frontend.Parser.AbsLatte.FdNoInit $1 }
ListFdItem :: { [FdItem] }
ListFdItem : FdItem { (:[]) $1 }
           | FdItem ',' ListFdItem { (:) $1 $3 }
ListMemberDef :: { [MemberDef] }
ListMemberDef : {- empty -} { [] }
              | ListMemberDef MemberDef { flip (:) $1 $2 }
Arg :: { Arg }
Arg : Type Ident { Frontend.Parser.AbsLatte.Arg $1 $2 }
ListArg :: { [Arg] }
ListArg : {- empty -} { [] }
        | Arg { (:[]) $1 }
        | Arg ',' ListArg { (:) $1 $3 }
FnDef :: { FnDef }
FnDef : Type Ident '(' ListArg ')' Block { Frontend.Parser.AbsLatte.FnDef $1 $2 $4 $6 }
ClsDef :: { ClsDef }
ClsDef : 'class' Ident '{' ListMemberDef '}' { Frontend.Parser.AbsLatte.ClsDef $2 (reverse $4) }
       | 'class' Ident 'extends' Ident '{' ListMemberDef '}' { Frontend.Parser.AbsLatte.ClsDefEx $2 $4 (reverse $6) }
Block :: { Block }
Block : '{' ListStmt '}' { Frontend.Parser.AbsLatte.Block (reverse $2) }
ListStmt :: { [Stmt] }
ListStmt : {- empty -} { [] } | ListStmt Stmt { flip (:) $1 $2 }
Stmt :: { Stmt }
Stmt : ';' { Frontend.Parser.AbsLatte.Empty }
     | Block { Frontend.Parser.AbsLatte.BStmt $1 }
     | Type ListItem ';' { Frontend.Parser.AbsLatte.Decl $1 $2 }
     | LVal '=' Expr ';' { Frontend.Parser.AbsLatte.Ass $1 $3 }
     | LVal '++' ';' { Frontend.Parser.AbsLatte.Incr $1 }
     | LVal '--' ';' { Frontend.Parser.AbsLatte.Decr $1 }
     | 'return' Expr ';' { Frontend.Parser.AbsLatte.Ret $2 }
     | 'return' ';' { Frontend.Parser.AbsLatte.VRet }
     | 'if' '(' Expr ')' Stmt { Frontend.Parser.AbsLatte.Cond $3 $5 }
     | 'if' '(' Expr ')' Stmt 'else' Stmt { Frontend.Parser.AbsLatte.CondElse $3 $5 $7 }
     | 'while' '(' Expr ')' Stmt { Frontend.Parser.AbsLatte.While $3 $5 }
     | 'for' '(' Type Ident ':' Expr ')' Stmt { Frontend.Parser.AbsLatte.For $3 $4 $6 $8 }
     | Expr ';' { Frontend.Parser.AbsLatte.SExp $1 }
Item :: { Item }
Item : Ident { Frontend.Parser.AbsLatte.NoInit $1 }
     | Ident '=' Expr { Frontend.Parser.AbsLatte.Init $1 $3 }
ListItem :: { [Item] }
ListItem : Item { (:[]) $1 } | Item ',' ListItem { (:) $1 $3 }
Type :: { Type }
Type : 'int' { Frontend.Parser.AbsLatte.IntT }
     | 'string' { Frontend.Parser.AbsLatte.StringT }
     | 'boolean' { Frontend.Parser.AbsLatte.BooleanT }
     | 'void' { Frontend.Parser.AbsLatte.VoidT }
     | Ident { Frontend.Parser.AbsLatte.ClassT $1 }
     | Type '[]' { Frontend.Parser.AbsLatte.ArrayT $1 }
ListType :: { [Type] }
ListType : {- empty -} { [] }
         | Type { (:[]) $1 }
         | Type ',' ListType { (:) $1 $3 }
Expr6 :: { Expr }
Expr6 : Integer { Frontend.Parser.AbsLatte.ELitInt $1 }
      | 'true' { Frontend.Parser.AbsLatte.ELitTrue }
      | 'false' { Frontend.Parser.AbsLatte.ELitFalse }
      | '(' Type ')null' { Frontend.Parser.AbsLatte.ELitNull $2 }
      | String { Frontend.Parser.AbsLatte.EString $1 }
      | Ident '(' ListExpr ')' { Frontend.Parser.AbsLatte.EApp $1 $3 }
      | LVal { Frontend.Parser.AbsLatte.ELVal $1 }
      | Expr6 '.' Ident '(' ListExpr ')' { Frontend.Parser.AbsLatte.ClsApply $1 $3 $5 }
      | Expr7 { $1 }
Expr5 :: { Expr }
Expr5 : 'new' Type '[' Expr ']' { Frontend.Parser.AbsLatte.ArrAlloc $2 $4 }
      | 'new' Type { Frontend.Parser.AbsLatte.ClsAlloc $2 }
      | '-' Expr6 { Frontend.Parser.AbsLatte.Neg $2 }
      | '!' Expr6 { Frontend.Parser.AbsLatte.Not $2 }
      | Expr6 { $1 }
Expr4 :: { Expr }
Expr4 : Expr4 Op2 Expr5 { Frontend.Parser.AbsLatte.EMul $1 $2 $3 }
      | Expr5 { $1 }
Expr3 :: { Expr }
Expr3 : Expr3 Op1 Expr4 { Frontend.Parser.AbsLatte.EAdd $1 $2 $3 }
      | Expr4 { $1 }
Expr2 :: { Expr }
Expr2 : Expr2 Op3 Expr3 { Frontend.Parser.AbsLatte.ERel $1 $2 $3 }
      | Expr3 { $1 }
Expr1 :: { Expr }
Expr1 : Expr2 Op4 Expr1 { Frontend.Parser.AbsLatte.EAnd $1 $2 $3 }
      | Expr2 { $1 }
Expr :: { Expr }
Expr : Expr1 Op5 Expr { Frontend.Parser.AbsLatte.EOr $1 $2 $3 }
     | Expr1 { $1 }
Expr7 :: { Expr }
Expr7 : '(' Expr ')' { $2 }
ListExpr :: { [Expr] }
ListExpr : {- empty -} { [] }
         | Expr { (:[]) $1 }
         | Expr ',' ListExpr { (:) $1 $3 }
LVal :: { LVal }
LVal : Ident { Frontend.Parser.AbsLatte.LVar $1 }
     | Expr6 '[' Expr ']' { Frontend.Parser.AbsLatte.LArrAcc $1 $3 }
     | Expr6 '.' Ident { Frontend.Parser.AbsLatte.LClsAcc $1 $3 }
Op1 :: { Op }
Op1 : '+' { Frontend.Parser.AbsLatte.Plus }
    | '-' { Frontend.Parser.AbsLatte.Minus }
Op2 :: { Op }
Op2 : '*' { Frontend.Parser.AbsLatte.Times }
    | '/' { Frontend.Parser.AbsLatte.Div }
    | '%' { Frontend.Parser.AbsLatte.Mod }
Op3 :: { Op }
Op3 : '<' { Frontend.Parser.AbsLatte.LTH }
    | '<=' { Frontend.Parser.AbsLatte.LE }
    | '>' { Frontend.Parser.AbsLatte.GTH }
    | '>=' { Frontend.Parser.AbsLatte.GE }
    | '==' { Frontend.Parser.AbsLatte.EQU }
    | '!=' { Frontend.Parser.AbsLatte.NE }
Op4 :: { Op }
Op4 : '&&' { Frontend.Parser.AbsLatte.AND }
Op5 :: { Op }
Op5 : '||' { Frontend.Parser.AbsLatte.OR }
Op :: { Op }
Op : Op1 { $1 } | Op2 { $1 } | Op3 { $1 } | Op4 { $1 } | Op5 { $1 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

